# -*- coding: utf-8 -*-
"""car_price_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BT1GDg04mgAPSJE3x8MfxIn9ZF2wsIrJ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/content/car data.csv")
df.head()

df.drop('Car_Name', axis=1, inplace=True)
df.head()

df.shape

df.isna().sum()

df.describe()

df.describe(include='O')

df.info()

current_year = 2021

df['Year'] = current_year - df['Year']
df.head()

df = pd.get_dummies(df, drop_first=True)
df.head()

df.shape

df.columns

df.dtypes

df.describe().T

sns.distplot(df['Selling_Price'])
plt.show()

plt.figure(figsize=(15, 10))
sns.pairplot(df)
plt.show()

x = df.drop('Selling_Price', axis=1)
y = df['Selling_Price']
x[:5], y[:5]

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=42)
x_train.shape, x_test.shape

x_train[:5]

import warnings
warnings.filterwarnings('ignore')

from sklearn.ensemble import RandomForestRegressor
from xgboost  import XGBRegressor
from sklearn.ensemble import GradientBoostingRegressor

rf = RandomForestRegressor()
xg = XGBRegressor()
gd = GradientBoostingRegressor()

model_list=[rf, xg, gd]

def build_model(model, xtrain, ytrain, xtest, ytest):
  Model = model.fit(xtrain, ytrain)
  return print('Accuracy : ', Model.score(x_test, y_test))
  
for i in model_list:
 build_model(i, x_train, y_train, x_test, y_test)

from sklearn.model_selection import cross_val_score

def cross_validation(estimator, xtrain, ytrain, cv, scoring):
  validate_score = cross_val_score(estimator=estimator, X=xtrain, y=ytrain, cv=cv, scoring=scoring)
  return print('Validate Score : ', validate_score.mean()*100)

for i in model_list:
  cross_validation(i, x_train, y_train, 5, 'r2')

param_grid = [{'max_depth':[2, 3, 4, 5],
               'max_leaf_nodes':[2, 3, 4, 5],
               'min_samples_leaf':[1, 2, 3, 4],
               'min_samples_split':[2, 4, 6, 8],
               'n_estimators':[100, 200, 300, 400, 500]}]       

from sklearn.model_selection import RandomizedSearchCV
Rs_cv = RandomizedSearchCV(estimator = rf, param_distributions = param_grid,scoring='r2', n_iter = 10, cv = 5, verbose=1, random_state=42, n_jobs = -1)
Rs_cv.fit(x_train, y_train)

Rs_cv.best_params_

Rs_cv.best_score_

from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error

def model_evaluate(model):
  y_pred = model.predict(x_test)
  print('r2 Score :', r2_score(y_test, y_pred))
  print('MSE :', mean_squared_error(y_test, y_pred))
  print('MAE :', mean_absolute_error(y_test, y_pred))
  print('RMSE :', np.sqrt(mean_squared_error(y_test, y_pred)))

model_evaluate(xg)

import pickle

with open('car_price_prediction_model.pkl', 'wb') as f:
  pickle.dump(xg, f)

with open('/content/car_price_prediction_model.pkl', 'rb') as f:
  model = pickle.load(f)

model.score(x_test, y_test)

